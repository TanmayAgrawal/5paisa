/* eslint-disable no-underscore/no-underscore */
// https://stackoverflow.com/questions/53769391/aes-encryption-in-js-equivalent-of-c-sharp

/**
 * 5paise.com (Authorization Algo)
 * ===============================
 * 
 * Example :
    Values to pass for Step 1 :
      Input :
        data() - mkjhytfd48j
        MyKey - 58xZ4dP3K762WtpDVt5EjqnNdfTZD844s8CAW5gGy9w7WMhuVtUPJ7xU2EMCrFQk
      Output :
        It will generate 16 bytes value
      Input :
        Values to pass for Step 2 :
          Convert above generated bytes value to ToBase64String
      Output :
        XB+RbZ6RIymFbWFmjoTf5w==
 *
 */

const axios = require('axios')
const CryptoJS = require('crypto-js')
const config = require('../config.js')

const requestCount = 10

const byteArrayToWordArray = (ba) => {
  let wa = [],
    i
  for (i = 0; i < ba.length; i++) {
    wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i)
  }

  return CryptoJS.lib.WordArray.create(wa, ba.length)
}

const wordToByteArray = (word, length) => {
  let ba = [],
    i,
    xFF = 0xff
  if (length > 0) ba.push(word >>> 24)
  if (length > 1) ba.push((word >>> 16) & xFF)
  if (length > 2) ba.push((word >>> 8) & xFF)
  if (length > 3) ba.push(word & xFF)

  return ba
}

const wordArrayToByteArray = (wordArray, length) => {
  if (
    wordArray.hasOwnProperty('sigBytes') &&
    wordArray.hasOwnProperty('words')
  ) {
    length = wordArray.sigBytes
    wordArray = wordArray.words
  }

  let result = [],
    bytes,
    i = 0
  while (length > 0) {
    bytes = wordToByteArray(wordArray[i], Math.min(4, length))
    length -= bytes.length
    result.push(bytes)
    i++
  }
  return [].concat.apply([], result)
}

const strToByteArray = (str, length) => {
  let wordArray = CryptoJS.enc.Utf8.parse(str)

  return wordArrayToByteArray(wordArray, length)
}

const addExtraByteToChars = (str) => {
  str = str.toString()

  let strResult = ''
  for (let i = 0; i < str.length; ++i) {
    strResult = strResult + str.charAt(i) + String.fromCharCode(0)
  }
  return strResult
}

const enc = (str) => {
  let strPadded = addExtraByteToChars(str)

  let keyBytes = CryptoJS.PBKDF2(
    config.secret,
    new CryptoJS.lib.WordArray.init(
      byteArrayToWordArray([
        83,
        71,
        26,
        58,
        54,
        35,
        22,
        11,
        83,
        71,
        26,
        58,
        54,
        35,
        22,
        11
      ]).words,
      16
    ),
    {
      keySize: 12,
      iterations: 1000
    }
  )

  let iv = new CryptoJS.lib.WordArray.init(keyBytes.words, 16)
  let key = new CryptoJS.lib.WordArray.init(keyBytes.words.splice(4), 32)
  let encrypted = CryptoJS.AES.encrypt(str, key, {
    iv
  })

  return encrypted.toString()
}

const requestData = {
  head: {
    appName: config.appName,
    appVer: config.appVersion,
    key: config.key,
    osName: config.orderChannel,
    requestCode: config.api.userLogin.requestCode,
    userId: config.userId,
    password: config.password
  },
  body: {
    Email_id: enc(config.clientEmail),
    Password: enc(config.clientPassword),
    LocalIP: config.server.LocalIP,
    PublicIP: config.server.PublicIP,
    HDSerailNumber: '5QE0RCHR',
    MACAddress: '50-CB-60-4A-D5-32',
    MachineID: '039378',
    VersionNo: '1.0',
    RequestNo: '1',
    My2PIN: enc(config.clientDob),
    ConnectionType: '1'
  }
}

module.exports = async () => {
  console.log('Authenticating...')
  let result = false
  let response = {}

  try {
    response = await axios({
      method: 'post',
      url: config.api.userLogin.url,
      headers: {
        'Content-Type': 'application/json'
      },
      data: requestData
    })

    let { ClientCode, EmailId } = response.data.body

    result = EmailId === config.clientEmail

    if (result) {
      let cookie = response.headers['set-cookie'][0]
      if (cookie) {
        cookie = cookie.split(';')[0]
        config.auth.cookie = `${cookie};`
      }

      config.clientCode = ClientCode
    }
  } catch (error) {
    result = false
    console.log('ERROR')
    console.log(response)
    console.log(error)
  } finally {
    config.isLogged = result

    if (result) {
      console.log('User logged')
    }

    return result
  }
}
